# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, on every push
# to the master branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of `ECR_REPOSITORY` in the workflow below with your repository's name.
#    Replace the value of `aws-region` in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the values for `service` and `cluster` in the workflow below with your service and cluster names.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of `task-definition` in the workflow below with your JSON file's name.
#    Replace the value of `container-name` in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

on:
  push:
    branches:
      - master

name: Deploy to AWS S3

jobs:
  build_and_deploy:
    name: Build React App
    runs-on: ubuntu-latest
    steps:
      - name: Checkout master
        uses: actions/checkout@master

      - name: Setup Node 12
        uses: actions/setup-node@master
        with:
          version: 12

      - name: Install dependencies
        run: npm ci

      - name: Run build
        run: npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Deploy to S3
        # check if the bucket exist, and then sync (delete removed files)
        if: github.ref == 'refs/heads/master'
        run: aws s3 sync build s3://chrisro-demo-app --delete
        # run: |
        #   aws s3 ls s3://chrisro-demo-app &>/dev/null
        #   aws s3 sync build s3://chrisro-demo-app --no-progress --delete

      - name: Invalidate CloudFront CDN
        if: github.ref == 'refs/heads/master'
        run: cloudfront create-invalidation --distribution-id=$CLOUDFRONT_DISTRIBUTION_ID --paths '/*'
        env:
          CLOUDFRONT_DISTRIBUTION_ID: EULGPB6MA6861


  # deploy:
  #   needs: [build]
  #   name: Upload to S3
  #   runs-on: ubuntu-latest
  #   steps:

  #   - name: Configure AWS credentials
  #     uses: aws-actions/configure-aws-credentials@v1
  #     with:
  #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       aws-region: us-west-2

  #   - name: Deploy to S3
  #     # check if the bucket exist, and then sync (delete removed files)
  #     if: github.ref == 'refs/heads/master'
  #     run: aws s3 sync build s3://chrisro-demo-app --delete
  #     # run: |
  #     #   aws s3 ls s3://chrisro-demo-app &>/dev/null
  #     #   aws s3 sync build s3://chrisro-demo-app --no-progress --delete

  #   - name: Invalidate CloudFront CDN
  #     if: github.ref == 'refs/heads/master'
  #     run: cloudfront create-invalidation --distribution-id=$CLOUDFRONT_DISTRIBUTION_ID --paths '/*'
  #     env:
  #       CLOUDFRONT_DISTRIBUTION_ID: EULGPB6MA6861

  #     # uses: actions/aws/cli@master
  #     # with:
  #     #   args: cloudfront create-invalidation --distribution-id=$CLOUDFRONT_DISTRIBUTION_ID --paths '/*'
  #     # env:
  #     #   AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #     #   AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #     #   CLOUDFRONT_DISTRIBUTION_ID: EULGPB6MA6861
